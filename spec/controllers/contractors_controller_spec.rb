# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe(ContractorsController, type: :controller) do
  # This should return the minimal set of attributes required to create a valid
  # Contractor. As you add validations to Contractor, be sure to
  # adjust the attributes here as well.
  let(:partner_company) do
    create(:partner_company)
  end

  let(:valid_attributes) do
    attributes_for(:contractor).merge(partner_company_id: partner_company.id)
  end

  let(:invalid_attributes) do
    {first_name: nil, last_name: nil}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ContractorsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  # login to http basic auth
  include AuthHelper
  before do
    http_login
  end

  describe "GET #index" do
    it "returns a success response" do
      Contractor.create!(valid_attributes)
      get :index, params: {}, session: valid_session
      expect(response).to(be_successful)
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      contractor = Contractor.create!(valid_attributes)
      get :show, params: {id: contractor.to_param}, session: valid_session
      expect(response).to(be_successful)
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to(be_successful)
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      contractor = Contractor.create!(valid_attributes)
      get :edit, params: {id: contractor.to_param}, session: valid_session
      expect(response).to(be_successful)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Contractor" do
        expect do
          post(:create, params: {contractor: valid_attributes}, session: valid_session)
        end.to(change(Contractor, :count).by(1))
      end

      it "redirects to the created contractor" do
        post :create, params: {contractor: valid_attributes}, session: valid_session
        expect(response).to(redirect_to(Contractor.last))
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {contractor: invalid_attributes}, session: valid_session
        expect(response).to(be_successful)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) do
        {first_name: "First Name", last_name: "Last Name"}
      end

      it "updates the requested contractor" do
        contractor = Contractor.create!(valid_attributes)
        put :update, params: {id: contractor.to_param, contractor: new_attributes}, session: valid_session
        contractor.reload
        expect(contractor.last_name).to(eql(new_attributes[:last_name]))
      end

      it "redirects to the contractor" do
        contractor = Contractor.create!(valid_attributes)
        put :update, params: {id: contractor.to_param, contractor: valid_attributes}, session: valid_session
        expect(response).to(redirect_to(contractor))
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        contractor = Contractor.create!(valid_attributes)
        put :update, params: {id: contractor.to_param, contractor: invalid_attributes}, session: valid_session
        expect(response).to(be_successful)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested contractor" do
      contractor = Contractor.create!(valid_attributes)
      expect do
        delete(:destroy, params: {id: contractor.to_param}, session: valid_session)
      end.to(change(Contractor, :count).by(-1))
    end

    it "redirects to the contractors list" do
      contractor = Contractor.create!(valid_attributes)
      delete :destroy, params: {id: contractor.to_param}, session: valid_session
      expect(response).to(redirect_to(contractors_url))
    end
  end
end
